diff --git a/toolkit/mozapps/extensions/content/extensions.js b/toolkit/mozapps/extensions/content/extensions.js
--- a/toolkit/mozapps/extensions/content/extensions.js
+++ b/toolkit/mozapps/extensions/content/extensions.js
@@ -95,28 +95,38 @@ XPCOMUtils.defineLazyGetter(gStrings, "b
   return this.brand.GetStringFromName("brandShortName");
 });
 XPCOMUtils.defineLazyGetter(gStrings, "appVersion", function() {
   return Services.appinfo.version;
 });
 
 window.addEventListener("load",  initialize, false);
 window.addEventListener("unload",  shutdown, false);
-window.addEventListener("popstate", function(event) {
-  gViewController.statePopped(event);
-}, false);
 
 var gPendingInitializations = 1;
 __defineGetter__("gIsInitializing", function() gPendingInitializations > 0);
 
 function initialize() {
   gCategories.initialize();
   gHeader.initialize();
   gViewController.initialize();
   gEventManager.initialize();
+
+  var view = VIEW_DEFAULT;
+  if (gCategories.node.selectedItem &&
+      gCategories.node.selectedItem.id != "category-search")
+    view = gCategories.node.selectedItem.value;
+
+  if ("arguments" in window && window.arguments.length > 0) {
+    if ("view" in window.arguments[0])
+      view = window.arguments[0].view;
+  }
+
+  gViewController.loadView(view);
+  notifyInitialized();
 }
 
 function notifyInitialized() {
   if (!gIsInitializing)
     return;
 
   gPendingInitializations--;
   if (!gIsInitializing) {
@@ -129,24 +139,18 @@ function notifyInitialized() {
 function shutdown() {
   gCategories.shutdown();
   gSearchView.shutdown();
   gEventManager.shutdown();
   gViewController.shutdown();
 }
 
 // Used by external callers to load a specific view into the manager
-function loadView(aViewId) {
-  if (!gViewController.initialViewSelected) {
-    // The caller opened the window and immediately loaded the view so it
-    // should be the initial history entry
-    gViewController.loadInitialView(aViewId);
-  } else {
-    gViewController.loadView(aViewId);
-  }
+function loadView(aViewId, aCallback) {
+  gViewController.loadView(aViewId, aCallback);
 }
 
 var gEventManager = {
   _listeners: {},
   _installListeners: [],
   checkCompatibilityPref: "",
 
   initialize: function() {
@@ -331,19 +335,19 @@ var gEventManager = {
 };
 
 
 var gViewController = {
   viewPort: null,
   currentViewId: "",
   currentViewObj: null,
   currentViewRequest: 0,
+  previousViewId: "",
   viewObjects: {},
   viewChangeCallback: null,
-  initialViewSelected: false,
 
   initialize: function() {
     this.viewPort = document.getElementById("view-port");
 
     this.viewObjects["search"] = gSearchView;
     this.viewObjects["discover"] = gDiscoverView;
     this.viewObjects["list"] = gListView;
     this.viewObjects["detail"] = gDetailView;
@@ -367,75 +371,30 @@ var gViewController = {
         } catch(e) {
           // this shouldn't be fatal
           Cu.reportError(e);
         }
       }
     }
   },
 
-  statePopped: function(e) {
-    // If this is a navigation to a previous state then load that state
-    if (e.state) {
-      this.loadViewInternal(e.state.view, e.state.previousView);
-      return;
-    }
-
-    // If the initial view has already been selected (by a call to loadView) then
-    // bail out now
-    if (this.initialViewSelected)
-      return;
-
-    // Otherwise load the default view
-    var view = VIEW_DEFAULT;
-    if (gCategories.node.selectedItem &&
-        gCategories.node.selectedItem.id != "category-search")
-      view = gCategories.node.selectedItem.value;
-
-    if ("arguments" in window && window.arguments.length > 0) {
-      if ("view" in window.arguments[0])
-        view = window.arguments[0].view;
-    }
-
-    this.loadInitialView(view);
-  },
-
   parseViewId: function(aViewId) {
     var matchRegex = /^addons:\/\/([^\/]+)\/(.*)$/;
     var [,viewType, viewParam] = aViewId.match(matchRegex) || [];
     return {type: viewType, param: decodeURIComponent(viewParam)};
   },
 
   get isLoading() {
-    return !this.currentViewObj || this.currentViewObj.node.hasAttribute("loading");
+    return this.currentViewObj.node.hasAttribute("loading");
   },
 
-  loadView: function(aViewId) {
+  loadView: function(aViewId, aCallback) {
     if (aViewId == this.currentViewId)
       return;
 
-    window.history.pushState({
-      view: aViewId,
-      previousView: this.currentViewId
-    }, document.title);
-    this.loadViewInternal(aViewId, this.currentViewId);
-  },
-
-  loadInitialView: function(aViewId) {
-    window.history.replaceState({
-      view: aViewId,
-      previousView: null
-    }, document.title);
-
-    this.loadViewInternal(aViewId, null);
-    this.initialViewSelected = true;
-    notifyInitialized();
-  },
-
-  loadViewInternal: function(aViewId, aPreviousView) {
     var view = this.parseViewId(aViewId);
 
     if (!view.type || !(view.type in this.viewObjects))
       throw new Error("Invalid view: " + view.type);
 
     var viewObj = this.viewObjects[view.type];
     if (!viewObj.node)
       throw new Error("Root node doesn't exist for '" + view.type + "' view");
@@ -447,80 +406,42 @@ var gViewController = {
           return;
         this.viewPort.selectedPanel.removeAttribute("loading");
       } catch (e) {
         // this shouldn't be fatal
         Cu.reportError(e);
       }
     }
 
-    gCategories.select(aViewId, aPreviousView);
+    gCategories.select(aViewId);
+
+    this.previousViewId = this.currentViewId;
 
     this.currentViewId = aViewId;
     this.currentViewObj = viewObj;
 
+    this.viewChangeCallback = aCallback;
+
     this.viewPort.selectedPanel = this.currentViewObj.node;
     this.viewPort.selectedPanel.setAttribute("loading", "true");
     this.currentViewObj.show(view.param, ++this.currentViewRequest);
   },
 
-  // Moves back in the document history and removes the current history entry
-  popState: function(aCallback) {
-    this.viewChangeCallback = function() {
-      // TODO To ensure we can't go forward again we put an additional entry for
-      // the current page into the history. Ideally we would just strip the
-      // history but there doesn't seem to be a way to do that. Bug 590661
-      window.history.pushState({
-        view: gViewController.currentViewId,
-        previousView: gViewController.currentViewId
-      }, document.title);
-      this.updateCommands();
-
-      if (aCallback)
-        aCallback();
-    };
-    window.history.back();
-  },
-
   notifyViewChanged: function() {
     this.viewPort.selectedPanel.removeAttribute("loading");
 
-    if (this.viewChangeCallback) {
+    if (this.viewChangeCallback)
       this.viewChangeCallback();
-      this.viewChangeCallback = null;
-    }
 
     var event = document.createEvent("Events");
     event.initEvent("ViewChanged", true, true);
     this.currentViewObj.node.dispatchEvent(event);
   },
 
   commands: {
-    cmd_back: {
-      isEnabled: function() {
-        return window.QueryInterface(Ci.nsIInterfaceRequestor)
-                     .getInterface(Ci.nsIWebNavigation)
-                     .canGoBack;
-      },
-      doCommand: function() {
-        window.history.back();
-      }
-    },
-
-    cmd_forward: {
-      isEnabled: function() {
-        return window.QueryInterface(Ci.nsIInterfaceRequestor)
-                     .getInterface(Ci.nsIWebNavigation)
-                     .canGoForward;
-      },
-      doCommand: function() {
-        window.history.forward();
-      }
-    },
-
     cmd_restartApp: {
       isEnabled: function() true,
       doCommand: function() {
         let cancelQuit = Cc["@mozilla.org/supports-PRBool;1"].
                          createInstance(Ci.nsISupportsPRBool);
         Services.obs.notifyObservers(cancelQuit, "quit-application-requested",
                                      "restart");
         if (cancelQuit.data)
@@ -830,17 +751,17 @@ var gViewController = {
         return hasPermission(aAddon, "uninstall");
       },
       doCommand: function(aAddon) {
         if (gViewController.currentViewObj != gDetailView) {
           aAddon.uninstall();
           return;
         }
 
-        gViewController.popState(function() {
+        gViewController.loadView(gViewController.previousViewId, function() {
           gViewController.currentViewObj.getListItemForID(aAddon.id).uninstall();
         });
       },
       getTooltip: function(aAddon) {
         if (!aAddon)
           return "";
         if (aAddon.operationsRequiringRestart & AddonManager.OP_NEEDS_RESTART_UNINSTALL)
           return gStrings.ext.GetStringFromName("uninstallAddonRestartRequiredTooltip");
@@ -1179,41 +1100,37 @@ var gCategories = {
     // Force persist of hidden state. See bug 15232
     var self = this;
     this._maybeHidden.forEach(function(aId) {
       var item = self.get(aId);
       item.setAttribute("hidden", !!item.hidden);
     });
   },
 
-  select: function(aId, aPreviousView) {
-    var view = gViewController.parseViewId(aId);
-    if (view.type == "detail") {
-      aId = aPreviousView;
-      view = gViewController.parseViewId(aPreviousView);
-    }
-
+  select: function(aId) {
     if (this.node.selectedItem &&
         this.node.selectedItem.value == aId)
       return;
 
+    var view = gViewController.parseViewId(aId);
+    if (view.type == "detail")
+      return;
+
     if (view.type == "search")
       var item = this._search;
     else
       var item = this.get(aId);
 
     if (item) {
       item.hidden = false;
       item.disabled = false;
       this.node.suppressOnSelect = true;
       this.node.selectedItem = item;
       this.node.suppressOnSelect = false;
       this.node.ensureElementIsVisible(item);
-      // When supressing onselect last-selected doesn't get updated
-      this.node.setAttribute("last-selected", item.id);
 
       this.maybeHideSearch();
     }
   },
 
   get: function(aId) {
     var items = document.getElementsByAttribute("value", aId);
     if (items.length)
@@ -2078,17 +1995,17 @@ var gDetailView = {
     this.updateState();
   },
 
   onUninstalling: function() {
     this.updateState();
   },
 
   onUninstalled: function() {
-    gViewController.popState();
+    gViewController.loadView(gViewController.previousViewId);
   },
 
   onOperationCancelled: function() {
     this.updateState();
   },
 
   onPropertyChanged: function(aProperties) {
     if (aProperties.indexOf("applyBackgroundUpdates") != -1) {
diff --git a/toolkit/mozapps/extensions/content/extensions.xul b/toolkit/mozapps/extensions/content/extensions.xul
--- a/toolkit/mozapps/extensions/content/extensions.xul
+++ b/toolkit/mozapps/extensions/content/extensions.xul
@@ -108,18 +108,16 @@
   <commandset id="globalCommandSet"
               oncommand="gViewController.doCommand(event.target.id);">
     <command id="cmd_findAllUpdates"/>
     <command id="cmd_restartApp"/>
     <command id="cmd_goToDiscoverPane"/>
     <command id="cmd_goToRecentUpdates"/>
     <command id="cmd_goToAvailableUpdates"/>
     <command id="cmd_installFromFile"/>
-    <command id="cmd_back"/>
-    <command id="cmd_forward"/>
     <command id="cmd_enableCheckCompatibility"/>
     <command id="cmd_enableUpdateSecurity"/>
     <command id="cmd_toggleAutoUpdateDefault"/>
     <command id="cmd_resetAddonAutoUpdate"/>
   </commandset>
 
   <!-- view commands - these act on the selected addon -->
   <commandset id="viewCommandSet"
@@ -136,20 +134,16 @@
     <command id="cmd_uninstallItem"/>
     <command id="cmd_cancelUninstallItem"/>
     <command id="cmd_cancelOperation"/>
     <command id="cmd_contribute"/>
   </commandset>
 
   <!-- main header -->
   <hbox id="header" align="center">
-    <button id="back-btn" class="nav-button" command="cmd_back"
-            tooltiptext="&cmd.back.tooltip;"/>
-    <button id="forward-btn" class="nav-button" command="cmd_forward"
-            tooltiptext="&cmd.forward.tooltip;"/>
     <spacer flex="1"/>
     <hbox id="updates-container" align="center">
       <image class="spinner"/>
       <label id="updates-noneFound" hidden="true"
              value="&updates.noneFound.label;"/>
       <button id="updates-manualUpdatesFound" class="button-link"
               hidden="true" label="&updates.manualUpdatesFound.label;"
               command="cmd_goToAvailableUpdates"/>
