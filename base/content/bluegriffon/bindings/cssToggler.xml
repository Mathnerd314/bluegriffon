<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is BlueGriffon.
   -
   - The Initial Developer of the Original Code is
   - Disruptive Innovations SARL.
   - Portions created by the Initial Developer are Copyright (C) 2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Glazman (daniel.glazman@disruptive-innovations.com), Original Author
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % cssTogglerDTD SYSTEM "chrome://bluegriffon/locale/cssToggler.dtd" >
  %cssTogglerDTD;
]>
<bindings id="cssTogglerBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="cssToggler">

    <resources>
      <stylesheet src="chrome://bluegriffon/skin/cssToggler.css"/>
    </resources>

    <content>
      <xul:hbox align="center" anonid="prefBox">
        <xul:label value="&cssPolicy.label;"/>
        <xul:menulist oncommand="this.parentNode.parentNode.toggle()"
                      anonid="cssPolicy">
          <xul:menupopup>
            <xul:menuitem label="&htmlAttr.label;"
                          value="0"/>
            <xul:menuitem label="&inlineStyles.label;"
                          value="1"/>
            <xul:menuitem label="&cssRules.label;"
                          value="2"/>
          </xul:menupopup>
        </xul:menulist>
      </xul:hbox>
      <xul:groupbox anonid="idBox" collapsed="true">
        <xul:caption label="&elementName.label;"/>
        <xul:description>&mandatoryId.decsription;</xul:description>
        <xul:hbox align="center">
          <xul:textbox anonid="idTextbox" flex="1"
                       oninput="this.parentNode.parentNode.parentNode.onIdBoxChange(this)"/>
          <xul:button label="&pickOne.button;"/>
          <xul:description anonid="idAlert" collapsed="true">&existingId.alert;</xul:description>
        </xul:hbox> 
      </xul:groupbox>
      <xul:box anonid="childrenBox" collapsed="true" orient="vertical">
        <children/>
      </xul:box>
    </content>

    <implementation>

      <property name="mCSSPolicy"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'cssPolicy')" />

      <property name="mChildrenBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'childrenBox')" />

      <property name="mIdBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'idBox')" />

      <property name="mIdTextBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'idTextbox')" />

      <constructor>
        <![CDATA[
          //this.init();
        ]]>
      </constructor>

      <method name="init">
        <body>
        <![CDATA[
          var useCssPref = 0;
          try {
            var useCssPref = GetPrefs().getIntPref("bluegriffon.css.policy");
          }
          catch(e) {}
          this.mCSSPolicy.value = useCssPref;
          this.showOrHideBoxes(useCssPref);
        ]]>
        </body>
      </method>

      <method name="toggle">
        <body>
        <![CDATA[
          var useCssPref = parseInt(this.mCSSPolicy.value);
          try {
            if (GetPrefs().getIntPref("bluegriffon.css.policy") == useCssPref)
              return;
          }
          catch(e) {}

          try {
            GetPrefs().setIntPref("bluegriffon.css.policy", useCssPref);
          }
          catch(e) {}
          this.showOrHideBoxes(useCssPref);
        ]]>
        </body>
      </method>

      <method name="showOrHideBoxes">
        <parameter name="useCssPref"/>
        <body>
        <![CDATA[
          switch(useCssPref)
          {
            case 2:
              this.mChildrenBox.removeAttribute("collapsed");
              this.mIdBox.removeAttribute("collapsed");
              this.onIdBoxChange(this.mIdTextBox);
              break;
            case 1:
              this.mChildrenBox.removeAttribute("collapsed");
              this.mIdBox.setAttribute("collapsed", "true");
              document.documentElement.getButton("accept").removeAttribute("disabled");
              break;
            case 0:
              this.mChildrenBox.setAttribute("collapsed", "true");
              this.mIdBox.setAttribute("collapsed", "true");
              document.documentElement.getButton("accept").removeAttribute("disabled");
              break;
            default: break;
          }

          this.setAttribute("style", "display: none");
          this.removeAttribute("style");

          try {
            window.resizeTo(window.outerWidth, window.outerHeight + 1); 
            window.sizeToContent();
          }
          catch(e) {}
        ]]>
        </body>
      </method>

      <method name="onIdBoxChange">
        <parameter name="aElt"/>
        <body>
        <![CDATA[
          if (aElt.value)
          {
            var elt = EditorUtils.getCurrentDocument().getElementById(aElt.value)
            if (!elt)
            {
              document.documentElement.getButton("accept").removeAttribute("disabled");
              return;
            }
          }

          document.documentElement.getButton("accept").setAttribute("disabled", "true");
        ]]>
        </body>
      </method>


    </implementation>
  </binding>

</bindings>
