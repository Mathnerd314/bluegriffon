<?xml version="1.0"?>

<!-- ***** BEGIN LICENSE BLOCK *****
   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
   -
   - The contents of this file are subject to the Mozilla Public License Version
   - 1.1 (the "License"); you may not use this file except in compliance with
   - the License. You may obtain a copy of the License at
   - http://www.mozilla.org/MPL/
   -
   - Software distributed under the License is distributed on an "AS IS" basis,
   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   - for the specific language governing rights and limitations under the
   - License.
   -
   - The Original Code is BlueGriffon.
   -
   - The Initial Developer of the Original Code is
   - Disruptive Innovations SARL.
   - Portions created by the Initial Developer are Copyright (C) 2008
   - the Initial Developer. All Rights Reserved.
   -
   - Contributor(s):
   -   Daniel Glazman (daniel.glazman@disruptive-innovations.com), Original Author
   -
   - Alternatively, the contents of this file may be used under the terms of
   - either the GNU General Public License Version 2 or later (the "GPL"), or
   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
   - in which case the provisions of the GPL or the LGPL are applicable instead
   - of those above. If you wish to allow use of your version of this file only
   - under the terms of either the GPL or the LGPL, and not to allow others to
   - use your version of this file under the terms of the MPL, indicate your
   - decision by deleting the provisions above and replace them with the notice
   - and other provisions required by the LGPL or the GPL. If you do not delete
   - the provisions above, a recipient may use your version of this file under
   - the terms of any one of the MPL, the GPL or the LGPL.
   -
   - ***** END LICENSE BLOCK ***** -->

<!DOCTYPE bindings [
  <!ENTITY % cssTogglerDTD SYSTEM "chrome://bluegriffon/locale/cssToggler.dtd" >
  %cssTogglerDTD;
]>
<bindings id="cssTogglerBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="cssToggler">

    <resources>
      <stylesheet src="chrome://bluegriffon/skin/cssToggler.css"/>
    </resources>

    <content>
      <xul:hbox align="center" anonid="prefBox">
        <xul:label value="&cssPolicy.label;"/>
        <xul:menulist oncommand="this.parentNode.parentNode.toggle()"
                      anonid="cssPolicy">
          <xul:menupopup>
            <xul:menuitem label="&htmlAttr.label;"
                          value="0"/>
            <xul:menuitem label="&inlineStyles.label;"
                          value="1"/>
            <xul:menuitem label="&cssRules.label;"
                          value="2"/>
            <xul:menuitem label="&reuseExistingStyle.label;"
                          value="3"/>
          </xul:menupopup>
        </xul:menulist>
      </xul:hbox>
      <xul:groupbox anonid="idBox" collapsed="true">
        <xul:caption label="&styleRule.label;"/>
        <xul:description>&mandatoryId.description;</xul:description>
        <xul:grid flex="1">
          <xul:columns><xul:column /><xul:column flex="1"/><xul:column/></xul:columns>
          <xul:rows>
            <xul:row align="center">
              <xul:label value="&idList.label;"/>
              <xul:textbox anonid="idTextbox" flex="1"
                           oninput="onIdOrClassBoxChange()"/>
              <xul:button label="&pickOne.button;"
                          oncommand="pickId(mIdTextBox)"/>
            </xul:row>
            <xul:row align="center">
              <xul:label value="&classList.label;"/>
              <xul:textbox anonid="classTextbox" flex="1"
                           oninput="onIdOrClassBoxChange()"/>
              <xul:button label="&pickOne.button;"
                          oncommand="pickId(mClassTextBox)"/>
            </xul:row>
          </xul:rows>
        </xul:grid>
        <xul:label value="&existingId.alert;" class="hiddenAlert" anonid="existingIdAlert"/>
      </xul:groupbox>
      <xul:groupbox anonid="reuseStylesBox" collapsed="true">
        <xul:caption label="&reuseExistingStyle.label;"/>
        <xul:grid flex="1">
          <xul:columns><xul:column/><xul:column/></xul:columns>
          <xul:rows>
            <xul:row align="center">
              <xul:label value="&classList.label;"/>
              <xul:menulist anonid="ClassList"
                            oncommand="onClassOrIdChange()">
                <xul:menupopup id="ClassPopup" onpopupshowing="initClassMenu(this, false);"/>
              </xul:menulist>
            </xul:row>
            <xul:row align="center">
              <xul:label value="&idList.label;"/>
              <xul:menulist anonid="IDList"
                            oncommand="onClassOrIdChange()">
                <xul:menupopup id="ClassPopup" onpopupshowing="initIdMenu(this);"/>
              </xul:menulist>
            </xul:row>
          </xul:rows>
        </xul:grid>
      </xul:groupbox>
      <xul:box anonid="childrenBox" collapsed="true" orient="vertical">
        <children/>
      </xul:box>
    </content>

    <implementation>

      <property name="cssPolicy"
                readonly="true"
                onget="return parseInt(this.mCSSPolicy.value)" />

      <property name="reusedID"
                readonly="true"
                onget="return this.mIDList.value" />
      <property name="reusedClass"
                readonly="true"
                onget="return this.mClassList.value" />

      <property name="newID"
                readonly="true"
                onget="return this.mIdTextBox.value" />
      <property name="newClass"
                readonly="true"
                onget="return this.mClassTextBox.value" />


      <property name="mCSSPolicy"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'cssPolicy')" />

      <property name="mChildrenBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'childrenBox')" />

      <property name="mIdBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'idBox')" />

      <property name="mIdTextBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'idTextbox')" />

      <property name="mClassTextBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'classTextbox')" />

      <property name="mReuseStylesBox"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'reuseStylesBox')" />

      <property name="mIDList"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'IDList')" />

      <property name="mClassList"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'ClassList')" />

      <property name="mExistingIdAlert"
                readonly="true"
                onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'existingIdAlert')" />

      <constructor>
        <![CDATA[
          //this.init();
        ]]>
      </constructor>

      <method name="init">
        <body>
        <![CDATA[
          var useCssPref = 0;
          try {
            var useCssPref = GetPrefs().getIntPref("bluegriffon.css.policy");
          }
          catch(e) {}
          this.mCSSPolicy.value = useCssPref;
          // adapt dialog depending on the pref
          this.showOrHideBoxes(useCssPref);
          this.updateButtons();
         ]]>
        </body>
      </method>

      <method name="updateButtons">
        <body>
        <![CDATA[

          var constraints = this.checkConstraints();
          switch (this.cssPolicy) {
            case 0:
            case 1:
              if (constraints)
                document.documentElement.getButton("accept").removeAttribute("disabled");
              else
                document.documentElement.getButton("accept").setAttribute("disabled", "true");
              break;
            case 2:
              if (constraints && (this.mIdTextBox.value || this.mClassTextBox.value))
                document.documentElement.getButton("accept").removeAttribute("disabled");
              else
                document.documentElement.getButton("accept").setAttribute("disabled", "true");
              break;
            case 3:
              if (constraints && (this.mIDList.value || this.mClassList.value))
                document.documentElement.getButton("accept").removeAttribute("disabled");
              else
                document.documentElement.getButton("accept").setAttribute("disabled", "true");
              break;
            default: break;
          }
        ]]>
        </body>
        </method>

      <method name="toggle">
        <body>
        <![CDATA[
          // get user's choice for CSS policy
          var useCssPref = parseInt(this.mCSSPolicy.value);
          try {
            // early way out if no change
            var policy = GetPrefs().getIntPref("bluegriffon.css.policy"); 
            if (policy == useCssPref) {
              return;
            }
          }
          catch(e) {}

          // save in pref
          try {
            GetPrefs().setIntPref("bluegriffon.css.policy", useCssPref);
          }
          catch(e) {}
          // update dialog
          this.showOrHideBoxes(useCssPref);
          window.sizeToContent();
        ]]>
        </body>
      </method>

      <method name="showOrHideBoxes">
        <parameter name="useCssPref"/>
        <body>
        <![CDATA[
          switch(useCssPref)
          {
            case 3: // reuse existing CSS rule
              this.mChildrenBox.setAttribute("collapsed", "true");
              this.mIdBox.setAttribute("collapsed", "true");
              this.mReuseStylesBox.removeAttribute("collapsed");
              initClassMenu(this.mClassList.menupopup, false);
              initIdMenu(this.mIDList.menupopup);
              this.onClassOrIdChange(this.mClassList);
              break;
            case 2: // create style rules if possible
              this.mChildrenBox.removeAttribute("collapsed");
              this.mIdBox.removeAttribute("collapsed");
              this.mReuseStylesBox.setAttribute("collapsed", "true");
              this.onIdOrClassBoxChange();
              break;
            case 1: // create inline styles if possible
              this.mChildrenBox.removeAttribute("collapsed");
              this.mIdBox.setAttribute("collapsed", "true");
              this.mReuseStylesBox.setAttribute("collapsed", "true");
              if (this.checkConstraints())
                document.documentElement.getButton("accept").removeAttribute("disabled");
              else
                document.documentElement.getButton("accept").setAttribute("disabled", "true");
              this.enableControls(true);
              break;
            case 0: // OMG, user really wants HTML attributes, OMG!!!
              this.mChildrenBox.setAttribute("collapsed", "true");
              this.mIdBox.setAttribute("collapsed", "true");
              this.mReuseStylesBox.setAttribute("collapsed", "true");
              if (this.checkConstraints())
                document.documentElement.getButton("accept").removeAttribute("disabled");
              else
                document.documentElement.getButton("accept").setAttribute("disabled", "true");
              this.enableControls(true);
              break;
            default: break;
          }

          //this.setAttribute("style", "display: none");
          //this.removeAttribute("style");

          if ("NotifierUtils" in window)
            NotifierUtils.notify("cssPolicyChanged", useCssPref);

          try {
            // ugly hack needed because sizeToContent() can suck if window
            // was never resized before...
            window.resizeTo(window.outerWidth, window.outerHeight + 1); 
            window.sizeToContent();
          }
          catch(e) {}
        ]]>
        </body>
      </method>

      <method name="onIdOrClassBoxChange">
        <body>
        <![CDATA[
          // make the alert on existing ID visible by default
          this.mExistingIdAlert.removeAttribute("class");

          if (this.mIdTextBox.value || this.mClassTextBox.value)
          {
            // ah, we have at least class or ID... if we have an ID, is there already
            // an element with that ID in the document ?
            var elt = this.mIdTextBox.value ?
                        EditorUtils.getCurrentDocument().getElementById(this.mIdTextBox.value)
                        : null;
            if (!elt)
            {
              // lucky man...
              this.mExistingIdAlert.setAttribute("class", "hiddenAlert");
              if (this.checkConstraints()) {
	              document.documentElement.getButton("accept").removeAttribute("disabled");
	              this.enableControls(true);
	              return;
              }
            }
          }
          else
            this.mExistingIdAlert.setAttribute("class", "hiddenAlert");

          // cannot create the element in that case
          document.documentElement.getButton("accept").setAttribute("disabled", "true");
          this.enableControls(false);
        ]]>
        </body>
      </method>

      <method name="onClassOrIdChange">
        <parameter name="aElt"/>
        <body>
        <![CDATA[
          if (this.checkConstraints() && (this.mIDList.value || this.mClassList.value))
          {
            // we have at least an ID or a class, we can create an element
            document.documentElement.getButton("accept").removeAttribute("disabled");
            this.enableControls(true);
            return;
          }
          document.documentElement.getButton("accept").setAttribute("disabled", "true");
          this.enableControls(false);
        ]]>
        </body>
      </method>

      <method name="checkConstraints">
        <body>
          <![CDATA[
            var constraints = this.getAttribute("constraints").split(',');

            for (var i = 0; i < constraints.length; i++) {
              var c = constraints[i];
              var elt = document.getElementById(c); 
              if (!elt.value)
                return false;
            }
            return true;
          ]]>
        </body>
      </method>
      <method name="enableControls">
        <parameter name="aEnable"/>
        <body>
        <![CDATA[
          var allControls = this.getAttribute("controls").split(',');
          for (var i = 0; i < allControls.length; i++)
          {
            var c = allControls[i];
            var elt = document.getElementById(c);
            if (elt)
            {
              if (aEnable)
                elt.removeAttribute("disabled");
              else
                elt.setAttribute("disabled", "true");
            }
          }
        ]]>
        </body>
        
      </method>

      <method name="pickId">
        <parameter name="aElt"/>
        <body>
        <![CDATA[
          var prefix;
          try {
            // not sure this is needed, but I wanted to reserve user-defined
            // prefices for future use
            var useCssPref = GetPrefs().getCharPref("bluegriffon.css.id_prefix");
          }
          catch(e) { prefix = "BGelt"; }

          aElt.value = prefix + new Date().valueOf() +
                            "_" + Math.round(Math.random() * 100000);
          this.onIdOrClassBoxChange(aElt);
        ]]>
        </body>
      </method>


    </implementation>
  </binding>

</bindings>
